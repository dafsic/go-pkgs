// 修改标准库中的log，加入level
package mxlog

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the logger.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//
//	2009/01/23 01:23:23 message
//
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	Llevel                        // level: 0(Debug), 1(Info), 2(Warn), 3(Error), 4(Panic), 5(Fatal),6(Off)
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
	Ldefault      = Llevel | Lshortfile | LstdFlags
)

type LogLevel int

// log levels
const (
	_               = iota
	LDebug LogLevel = iota
	LInfo
	LWarn
	LError
	LPanic
	LFatal
	LOff
)

// log level string
var lvlStr = []string{
	"UNKNOWN",
	"DEBUG",
	"INFO",
	"WARN",
	"ERROR",
	"PANIC",
	"FATAL",
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	level  LogLevel   //log level
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write
}

var lvlMap = map[string]LogLevel{"debug": LDebug, "info": LInfo, "error": LError, "panic": LPanic, "fatal": LFatal}

func LogLevelFromString(str string) LogLevel {
	return lvlMap[str]
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func NewLogger(out io.Writer, prefix string, lvl LogLevel, flag int) *Logger {
	return &Logger{out: out, prefix: prefix, level: lvl, flag: flag}
}

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   - l.prefix (if it's not blank),
//   - level (if corresponding flags are provided),
//   - date and/or time (if corresponding flags are provided),
//   - file and line number (if corresponding flags are provided).
func (l *Logger) formatHeader(buf *[]byte, t time.Time, lvl LogLevel, file string, line int) {
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '-')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '-')
			itoa(buf, day, 2)
			*buf = append(*buf, 'T')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, '\t')
		}
	}

	if l.flag&Llevel != 0 {
		*buf = append(*buf, lvlStr[lvl]...)
		*buf = append(*buf, '\t')
	}

	*buf = append(*buf, l.prefix...)
	*buf = append(*buf, '\t')

	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, '\t')
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string, lvl LogLevel) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()

	if lvl < l.level {
		return nil
	}

	if l.flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, lvl, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

//-------------------------------------------------------------

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

// SetLevel sets the output destination for the logger.
func (l *Logger) SetLevel(lvl LogLevel) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.level = lvl
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out
}

func (l *Logger) Debugf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LDebug)
}

func (l *Logger) Debug(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LDebug)
}

func (l *Logger) Infof(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LInfo)
}

func (l *Logger) Info(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LInfo)
}

func (l *Logger) Warnf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LWarn)
}

func (l *Logger) Warn(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LWarn)
}

func (l *Logger) Errorf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LError)
}

func (l *Logger) Error(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LError)
}

func (l *Logger) Panicf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LPanic)
	panic(fmt.Sprintf(format, v...))
}

func (l *Logger) Panic(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LPanic)
	panic(fmt.Sprint(v...))
}

func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), LFatal)
	os.Exit(1)
}

func (l *Logger) Fatal(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...), LFatal)
	os.Exit(1)
}
